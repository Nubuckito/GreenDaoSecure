package greendao;

import android.content.Context;
import de.greenrobot.dao.wrapper.SQLiteDatabaseWrapper;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import de.greenrobot.dao.wrapper.SQLiteOpenHelperWrapper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import info.guardianproject.cacheword.CacheWordHandler;

import greendao.BoxDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabaseWrapper db, boolean ifNotExists) {
        BoxDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabaseWrapper db, boolean ifExists) {
        BoxDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelperWrapper  {

        public OpenHelper(Context context, String name,CacheWordHandler cacheWord, CursorFactory factory) {
            super(context, name, cacheWord, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabaseWrapper db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends SQLiteOpenHelperWrapper {
        public DevOpenHelper(Context context, String name, CacheWordHandler cacheWord, CursorFactory factory) {
            super(context, name, cacheWord, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabaseWrapper db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabaseWrapper db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(BoxDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
